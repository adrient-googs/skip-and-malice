// Generated by CoffeeScript 1.3.3

/*
Useful Utilities
*/


(function() {
  var AdminGame, AdminGameView, CalEvent, CalEventView, Calendar, CalendarView, DoGame, DoGameView, DoInstructionView, EditCalEventView, Game, GameView, Guide, GuideView, Instruction, InstructionView, Player, Rabble, RabbleView, RemoteModel, Supplicant, SupplicantConstraintView, SupplicantView, TestGame, TestGameView, TypeGame, TypeGameView, chatter, openChannel, util,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = util != null ? util : {};

  util.assertion = function(condition, err_msg) {
    if (!condition) {
      alert(err_msg);
      throw new Error(err_msg);
    }
  };

  util.flip = function(func) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return func.apply(null, args.slice(0).reverse());
    };
  };

  util.later = function() {
    var args, func, ms, _ref, _ref1;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length === 1) {
      _ref = [args[0], 1], func = _ref[0], ms = _ref[1];
    } else if (args.length === 2) {
      _ref1 = [args[1], args[0]], func = _ref1[0], ms = _ref1[1];
    } else {
      throw new Error('util.later takes 1 or 2 arguments only.');
    }
    return setTimeout(func, ms);
  };

  util.titleCase = function(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  };

  util.prettyUsername = function(name) {
    var at_index;
    at_index = name.indexOf('@');
    if (at_index > 0) {
      return name.slice(0, at_index);
    } else {
      return name;
    }
  };

  util.mash = function(array) {
    var dict, key, key_value, value, _i, _len;
    dict = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      key_value = array[_i];
      key = key_value[0], value = key_value[1];
      dict[key] = value;
    }
    return dict;
  };

  util.isInteger = function(obj) {
    return _.isNumber(obj) && (obj % 1 === 0);
  };

  util.typeName = function(obj) {
    if (!(obj != null)) {
      return 'undefined';
    }
    return obj.__proto__.constructor.name;
  };

  util.setCollectionAsAttribute = function(model, collection_name, initial_elts) {
    var collection,
      _this = this;
    if (initial_elts == null) {
      initial_elts = [];
    }
    collection = new Backbone.Collection(initial_elts);
    model[collection_name] = collection;
    model.set(collection_name, collection.models);
    collection.on('add remove change', function() {
      console.log(" --- updating " + (util.typeName(model)) + " based on collection change");
      return model.attributes[collection_name] = collection.models;
    });
    model.on("change:" + collection_name, function() {
      console.log(" --- updating collection based on " + (util.typeName(model)) + " change");
      return collection.reset(model.attributes[collection_name]);
    });
    return collection.on('all', function() {
      var args, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return model.trigger.apply(model, ["" + collection_name + ":" + type].concat(__slice.call(args)));
    });
  };

  util.timeStr = function(hour) {
    var suf, _ref;
    if (hour === 12) {
      return 'noon';
    }
    _ref = hour < 12 ? [hour, 'am'] : hour < 13 ? [hour, 'pm'] : [hour - 12, 'pm'], hour = _ref[0], suf = _ref[1];
    if (util.isInteger(hour)) {
      return "" + hour + suf;
    } else {
      return "" + (Math.floor(hour)) + ":30" + suf;
    }
  };

  util.WEEKDAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  util.randInt = function(max) {
    return Math.floor(Math.random() * max);
  };

  util.choose = function(array, exclude) {
    var elt;
    if (exclude == null) {
      exclude = [];
    }
    while (true) {
      elt = array[util.randInt(array.length)];
      if (__indexOf.call(exclude, elt) < 0) {
        return elt;
      }
    }
  };

  util.uid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r;
      r = util.randInt(16);
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  /*
    Performs each action with a given probability, e.g.
  
      util.withProbability [
        0.25, -> action A
        0.50, -> action B
        null, -> action C
      ]
  
    performs action A with probability 0.25, action B with
    probability 0.5 and action C with the remaining 0.25
    probability.
  */


  util.withProbability = function(actions) {
    var action, ii, prob, random, _i, _ref, _ref1;
    random = Math.random();
    for (ii = _i = 0, _ref = actions.length; _i < _ref; ii = _i += 2) {
      _ref1 = actions.slice(ii, (ii + 1) + 1 || 9e9), prob = _ref1[0], action = _ref1[1];
      if (!(prob != null) || (random -= prob) < 0) {
        return action();
      }
    }
  };

  /*
    Appends an element to a div assuming all elements are laid
    out as follows:
  
      ELT   height
      SPACE vertical_margin
      ELT   height
      SPACE vertical_margin
      ELT   height
  
    Also, resizes the containing div.
  */


  util.verticalAppend = function(elt, container, height, vertical_margin) {
    var n_children;
    n_children = container.children().length;
    elt.css({
      height: height,
      top: n_children * (height + vertical_margin)
    });
    container.css({
      height: height * (n_children + 1) + vertical_margin * n_children
    });
    return container.append(elt);
  };

  /*
    Opens a channel to the server and delegates message calls to the
    delegate object.
  */


  openChannel = function(token, delegate) {
    var channel;
    channel = new goog.appengine.Channel(token);
    return channel.open({
      onopen: function() {
        return typeof delegate.channel_open === "function" ? delegate.channel_open() : void 0;
      },
      onclose: function() {
        return typeof delegate.channel_close === "function" ? delegate.channel_close() : void 0;
      },
      onerror: function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof delegate.channel_error === "function" ? delegate.channel_error.apply(delegate, args) : void 0;
      },
      onmessage: function(message) {
        var args, method, _ref;
        _ref = chatter.unwrap(JSON.parse(message.data)), method = _ref[0], args = _ref[1];
        console.log('ONMESSAGE');
        console.log(method);
        console.log(args);
        console.log(_.keys(delegate));
        return delegate[method](args);
      }
    });
  };

  /*
  Enables serialization (wrapping) and deserialization (unwrapping) of
  arbitrary objects according to the chatter protocol.
  */


  chatter = chatter != null ? chatter : {};

  chatter.unwrap_table = {};

  chatter.register = function(type) {
    return chatter.unwrap_table[type.name] = type;
  };

  chatter.wrap = function(obj) {
    var key, value, x;
    if (_.isFunction(obj != null ? obj.wrap : void 0)) {
      return obj.wrap();
    } else if (_.isUndefined(obj)) {
      return ['NoneType', ''];
    } else if (_.isNull(obj)) {
      return ['NoneType', ''];
    } else if (_.isBoolean(obj)) {
      return ['bool', obj];
    } else if (util.isInteger(obj)) {
      return ['int', obj];
    } else if (_.isNumber(obj)) {
      return ['float', obj];
    } else if (_.isString(obj)) {
      return ['str', obj];
    } else if (_.isArray(obj)) {
      return [
        'list', (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            x = obj[_i];
            _results.push(chatter.wrap(x));
          }
          return _results;
        })()
      ];
    } else if (_.isObject(obj)) {
      console.log("wrapping object keys: " + (_.keys(obj)));
      return [
        'dict', chatter.wrap((function() {
          var _results;
          _results = [];
          for (key in obj) {
            value = obj[key];
            _results.push([key, value]);
          }
          return _results;
        })())
      ];
    } else {
      throw new Error("cannot wrap " + obj);
    }
  };

  chatter.unwrap = function(obj) {
    var attribs, data, key, type, type_name, value, x, _i, _len, _results;
    type_name = obj[0], data = obj[1];
    type = chatter.unwrap_table[type_name];
    if (type != null) {
      attribs = util.mash((function() {
        var _results;
        _results = [];
        for (key in data) {
          value = data[key];
          _results.push([key, chatter.unwrap(value)]);
        }
        return _results;
      })());
      console.log("unwrapping!!! " + type.name);
      return new type(attribs);
    } else {
      switch (type_name) {
        case 'list':
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            x = data[_i];
            _results.push(chatter.unwrap(x));
          }
          return _results;
        case 'dict':
          return util.mash(chatter.unwrap(data));
        case 'int':
        case 'long':
        case 'unicode':
        case 'str':
        case 'float':
          return data;
        case 'NoneType':
          return void 0;
        default:
          throw new Error("type_name \"" + type_name + "\" not understood");
      }
    }
  };

  /*
  Enables serialization (wrapping) and deserialization (unwrapping) of
  arbitrary objects according to the chatter protocol.
  */


  /*
  Enables entities and methods to be serialized across the internet.
  */


  RemoteModel = (function(_super) {
    var _this = this;

    __extends(RemoteModel, _super);

    function RemoteModel() {
      return RemoteModel.__super__.constructor.apply(this, arguments);
    }

    RemoteModel.prototype.urlRoot = function() {
      return "" + this.__proto__.constructor.name + "/datastore";
    };

    RemoteModel.prototype.parse = function(obj) {
      var data, key, my_name, type_name, value;
      my_name = this.__proto__.constructor.name;
      type_name = obj[0], data = obj[1];
      util.assertion(my_name === type_name, "" + my_name + " cannot parse " + type_name);
      return util.mash((function() {
        var _results;
        _results = [];
        for (key in data) {
          value = data[key];
          _results.push([key, chatter.unwrap(value)]);
        }
        return _results;
      })());
    };

    RemoteModel.prototype.toJSON = function() {
      var key, my_name, value, wrapped_attribs;
      my_name = this.__proto__.constructor.name;
      console.log("RemoteModel wrapping " + my_name + " attribs: " + (_.keys(this.attributes)));
      if (this.attributes.calEvents != null) {
        console.log("HAS calEvents, length:" + this.attributes.calEvents.length);
      }
      wrapped_attribs = (function() {
        var _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push([key, chatter.wrap(value)]);
        }
        return _results;
      }).call(this);
      return [my_name, util.mash(wrapped_attribs)];
    };

    RemoteModel.prototype.wrap = function() {
      return this.toJSON();
    };

    /*
      To declare a remote static method:
        @funcName: RemoteModel.remoteStaticMethod 'funcName'
      To catch errors, bind an object to the "ajaxError" event.
    */


    RemoteModel.remoteStaticMethod = function(name) {
      return function() {
        var args, done, method_args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = (function() {
          switch (args.length) {
            case 0:
              return [{}, function() {}];
            case 1:
              if (_.isFunction(args[0])) {
                return [{}, args[0]];
              } else {
                return [args[0], function() {}];
              }
            case 2:
              return args;
            default:
              throw new Error('Too many arguements.');
          }
        })(), method_args = _ref[0], done = _ref[1];
        return $.post("" + this.prototype.constructor.name + "/method/" + name, JSON.stringify(chatter.wrap({
          args: method_args
        })), function(response) {
          return done(chatter.unwrap(response).return_val);
        });
      };
    };

    /*
      To declare a remote instance method:
    
        funcName: RemoteModel.remoteInstanceMethod 'funcName', options
    
      Options:
      
        sync_before (default=false) : save to server before remote method invocation
        sync_after (default=false)  : fetch from server after remote method invocation
    
      To catch errors, bind an object to the "ajaxError" event.
    */


    RemoteModel.remoteInstanceMethod = function(name, options) {
      if (options == null) {
        options = {};
      }
      return function() {
        var args, done, method_args, request, _ref, _ref1, _ref2,
          _this = this;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = (function() {
          switch (args.length) {
            case 0:
              return [{}, function() {}];
            case 1:
              if (_.isFunction(args[0])) {
                return [{}, args[0]];
              } else {
                return [args[0], function() {}];
              }
            case 2:
              return args;
            default:
              throw new Error('Too many arguements.');
          }
        })(), method_args = _ref[0], done = _ref[1];
        request = {
          args: method_args,
          sync_before: (_ref1 = options.sync_before) != null ? _ref1 : false,
          sync_after: (_ref2 = options.sync_after) != null ? _ref2 : false
        };
        if (request.sync_before) {
          request.self = this;
        }
        return $.post("" + this.__proto__.constructor.name + "/method/" + name + "/" + this.id, JSON.stringify(chatter.wrap(request)), function(response) {
          response = chatter.unwrap(response);
          if (request.sync_after) {
            util.assertion(response.self.id === _this.id, 'ID cannot be reset.');
            _this.set(response.self.attributes);
          }
          return done(response.return_val);
        });
      };
    };

    return RemoteModel;

  }).call(this, Backbone.Model);

  CalEvent = (function(_super) {

    __extends(CalEvent, _super);

    function CalEvent() {
      return CalEvent.__super__.constructor.apply(this, arguments);
    }

    chatter.register(CalEvent);

    CalEvent.prototype.defaults = {
      day: 0,
      time: 9,
      length: 4,
      name: 'Alan',
      title: 'No Activity'
    };

    CalEvent.prototype.initialize = function() {
      this.view = new CalEventView({
        model: this
      });
      return this.edit_view = new EditCalEventView({
        model: this
      });
    };

    CalEvent.prototype.validate = function(attribs) {
      if (this.parent.overlaps(attribs, this)) {
        return 'overlap';
      }
      if (attribs.length !== 4) {
        return 'length must be 4';
      }
      if (attribs.title !== CalEvent.TITLES[0]) {
        return "activity must be " + CalEvent.TITLES[0];
      }
    };

    /*
      Returns true if this event overaps another.
      Overlaps happen because of shared name or overlapping time.
    */


    CalEvent.prototype.overlaps = function(ev) {
      var attribs, end1, end2, len1, len2, start1, start2, _ref, _ref1, _ref2;
      attribs = (_ref = ev.attributes) != null ? _ref : ev;
      if (attribs.name === this.get('name')) {
        return true;
      }
      if (attribs.day !== this.get('day')) {
        return false;
      }
      _ref1 = this.attributes, start1 = _ref1.time, len1 = _ref1.length;
      start2 = attribs.time, len2 = attribs.length;
      _ref2 = [start1 + len1, start2 + len2], end1 = _ref2[0], end2 = _ref2[1];
      if ((start1 <= start2 && start2 < end1)) {
        return true;
      }
      if ((start2 <= start1 && start1 < end2)) {
        return true;
      }
      return false;
    };

    return CalEvent;

  })(RemoteModel);

  CalEventView = (function(_super) {

    __extends(CalEventView, _super);

    CalEventView.DAY_WIDTH_PIXELS = 90;

    CalEventView.HOUR_HEIGHT_PIXELS = 40;

    CalEventView.COLORS = {
      satisfies: 'rgb(132, 186, 101)',
      unmatched: 'rgb(223, 90, 54)',
      error: 'rgb(240, 144, 0)',
      error_string: 'rgb(226, 1, 61)'
    };

    function CalEventView(args) {
      args.el = $('#prototypes .calEventView').clone()[0];
      CalEventView.__super__.constructor.call(this, args);
    }

    CalEventView.prototype.initialize = function(model) {
      var _this = this;
      this.setStatus('unmatched');
      this.$el.draggable({
        containment: 'parent',
        drag: function() {
          return _this.posToDate();
        },
        stop: function() {
          return _this.trigger('stop');
        }
      });
      this.$el.css({
        position: 'absolute'
      });
      this.model.on('change', function(model, arg) {
        return _this.onModelChange(arg.changes);
      });
      this.model.on('error', function(model, type) {
        return _this.onError(type);
      });
      this.on('stop', function() {
        return _this.onStop();
      });
      return this.$el.on('click', function(event) {
        return _this.onClick(event);
      });
    };

    CalEventView.prototype.posToDate = function() {
      var h, new_date, x, y;
      this.$el.stop(true);
      x = this.$el.position().left;
      y = this.$el.position().top;
      h = this.$el.height();
      new_date = {
        day: Math.floor(x / CalEventView.DAY_WIDTH_PIXELS + 0.5),
        time: Math.floor(y / (CalEventView.HOUR_HEIGHT_PIXELS * 4) + 0.5) * 4 + 9,
        length: 4
      };
      new_date.length = Math.max(new_date.length, 1.0);
      this.renderTime(new_date);
      return new_date;
    };

    CalEventView.prototype.dateToPos = function(date) {
      var _this = this;
      date = date != null ? date : this.model.attributes;
      return util.later(function() {
        return _this.$el.animate({
          left: date.day * CalEventView.DAY_WIDTH_PIXELS,
          top: (date.time - 9) * CalEventView.HOUR_HEIGHT_PIXELS,
          width: CalEventView.DAY_WIDTH_PIXELS,
          height: date.length * CalEventView.HOUR_HEIGHT_PIXELS
        }, 500, 'easeOutExpo');
      });
    };

    CalEventView.prototype.renderTime = function(date) {
      var duration, error_color, from_time, is_dragging, time_color, time_div, time_text, to_time;
      is_dragging = this.$el.hasClass('ui-draggable-dragging');
      time_div = this.$el.find('#time');
      error_color = CalEventView.COLORS.error_string;
      if (is_dragging) {
        from_time = util.timeStr(date.time);
        to_time = util.timeStr(date.time + date.length);
        time_text = "" + util.WEEKDAYS[date.day] + " " + from_time + " - " + to_time;
        time_color = this.hasError('date') ? error_color : 'black';
      } else {
        duration = date.length === 1 ? '1 hr' : "" + date.length + " hrs";
        time_text = "Duration: " + duration;
        console.log("status:" + this.status + " length_error:" + (this.hasError('length')));
        time_color = this.hasError('length') ? error_color : 'black';
      }
      time_div.text(time_text);
      return time_div.css({
        color: time_color
      });
    };

    CalEventView.prototype.setStatus = function(status) {
      var bg_color, colors, title_color;
      this.status = status;
      colors = CalEventView.COLORS;
      switch (status) {
        case 'satisfies':
          bg_color = colors.satisfies;
          title_color = 'black';
          break;
        case 'unmatched':
          bg_color = colors.unmatched;
          title_color = 'black';
          break;
        default:
          bg_color = colors.error;
          title_color = this.hasError('title') ? colors.error_string : 'black';
      }
      this.$el.css({
        backgroundColor: bg_color
      });
      this.$el.find('#title').css({
        color: title_color
      });
      this.renderTime(this.model.attributes);
      console.log("SETTING STATUS (" + (this.model.get('name')) + "): " + status);
      console.log("bg_color: " + bg_color);
      return console.log("title_color: " + title_color);
    };

    CalEventView.prototype.hasError = function(error) {
      if (this.status.indexOf('error:') !== 0) {
        return false;
      } else {
        return __indexOf.call(this.status.slice(6).split(','), error) >= 0;
      }
    };

    CalEventView.prototype.onModelChange = function(changes) {
      var time_changes;
      changes = _.keys(changes);
      if (__indexOf.call(changes, 'name') >= 0) {
        this.$el.find('#avatar').attr({
          src: SupplicantView.avatarImage(this.model.get('name'))
        });
        this.$el.find('#name').text(this.model.get('name'));
      }
      if (__indexOf.call(changes, 'title') >= 0) {
        this.$el.find('#title').text(this.model.get('title'));
      }
      time_changes = ['day', 'time', 'length'];
      if (!_.isEmpty(_.intersection(changes, time_changes))) {
        this.renderTime(this.model.attributes);
        return this.dateToPos();
      }
    };

    CalEventView.prototype.onError = function(type) {
      console.log("CalEventView: Error type: " + type);
      console.log('THE EVENTS');
      console.log(this.model.parent.calEvents.models);
      return this.dateToPos();
    };

    CalEventView.prototype.onClick = function(event) {
      this.model.edit_view.show();
      return false;
    };

    CalEventView.prototype.onStop = function() {
      var _this = this;
      this.model.set(this.posToDate());
      return util.later(function() {
        return _this.renderTime(_this.model.attributes);
      });
    };

    return CalEventView;

  })(Backbone.View);

  EditCalEventView = (function(_super) {

    __extends(EditCalEventView, _super);

    EditCalEventView.prototype.events = {
      'click #ok': 'onClickOk',
      'click #delete': 'onClickDelete',
      'change #title': 'onModelChange',
      'change #name': 'onModelChange'
    };

    function EditCalEventView(options) {
      options.el = $('#prototypes .editCalEventView').clone()[0];
      EditCalEventView.__super__.constructor.call(this, options);
    }

    EditCalEventView.prototype.initialize = function() {
      var _this = this;
      this.title_select = this.$el.find('input#title');
      this.name_select = this.$el.find('select#name');
      return this.$el.find('#delete').on('keydown', function(event) {
        if (event.keyCode === 9) {
          _this.name_select.select();
          return false;
        }
      });
    };

    EditCalEventView.prototype.show = function() {
      var all_names, available_names, container, ii, my_name, name, selected_index, used_names, view, view_middle,
        _this = this;
      $('#cover').css({
        visibility: 'visible'
      });
      this.title_select.val(this.model.get('title'));
      all_names = _.keys(SupplicantView.NAMES_AND_AVATARS);
      used_names = this.model.parent.calEvents.pluck('name');
      available_names = _.difference(all_names, used_names);
      available_names.push(this.model.get('name'));
      available_names.sort();
      my_name = this.model.get('name');
      for (ii in available_names) {
        name = available_names[ii];
        this.name_select.append("<option value='" + name + "'>" + name + "</option>");
        if (name === my_name) {
          selected_index = ii;
        }
      }
      this.name_select.val(my_name);
      this.title_possibe_values = CalEvent.TITLES;
      this.name_possibe_values = available_names;
      view = this.model.view.$el;
      view_middle = view.offset().top + view.height() / 2;
      this.$el.css({
        top: view_middle - 72,
        left: view.offset().left + view.width() - 3
      });
      $("body").append(this.el);
      container = this.$el.find('#widgets');
      container.css({
        visibility: 'hidden'
      });
      return this.$el.effect('scale', {
        origin: ['middle', 'center'],
        from: {
          width: 0,
          height: 0
        },
        percent: 100,
        easing: 'easeOutBounce'
      }, 500, function() {
        container.css({
          visibility: 'visible'
        });
        return _this.name_select.focus();
      });
    };

    EditCalEventView.prototype.hide = function() {
      var container, original_size,
        _this = this;
      this.title_select.empty();
      container = this.$el.find('#widgets');
      container.css({
        visibility: 'hidden'
      });
      original_size = {
        width: this.$el.css('width'),
        height: this.$el.css('height')
      };
      return this.$el.effect('scale', {
        origin: ['middle', 'center'],
        percent: 0,
        easing: "easeInBack"
      }, 300, function() {
        _this.$el.detach();
        _this.$el.css(original_size);
        return $('#cover').css({
          visibility: 'hidden'
        });
      });
    };

    EditCalEventView.prototype.onClickOk = function() {
      return this.hide();
    };

    EditCalEventView.prototype.onClickDelete = function() {
      this.model.parent.calEvents.remove(this.model);
      return this.hide();
    };

    EditCalEventView.prototype.onModelChange = function() {
      console.log('ON MODEL CHANGE');
      this.$el.find('#ok').removeAttr('disabled');
      this.$el.find('input').css({
        backgroundColor: 'white'
      });
      this.model.set('name', this.name_select.val());
      return false;
    };

    return EditCalEventView;

  })(Backbone.View);

  CalEvent.TITLES = ['No Activity', 'Costume Party', 'Snack', 'People Watch', 'Tennis', 'Pedicure', 'Climb A Tree', 'Breakfast', 'Lunch', 'Henna Tattoos', 'Opera', 'Paint', 'Shopping', 'Ice Cream', 'Long Walk', 'Picnic', 'Drinking Contest', 'Scavenger Hunt', 'Play Catch', 'Fruit Smoothies'];

  Calendar = (function(_super) {

    __extends(Calendar, _super);

    chatter.register(Calendar);

    Calendar.EMPTY_UID = "empty_calendar";

    Calendar.prototype.defaults = {
      uid: Calendar.EMPTY_UID,
      calEvents: void 0
    };

    Calendar.saveNewCalendar = RemoteModel.remoteStaticMethod('saveNewCalendar');

    Calendar.getEmptyCalendar = RemoteModel.remoteStaticMethod('getEmptyCalendar');

    Calendar.getCalendar = RemoteModel.remoteStaticMethod('getCalendar');

    function Calendar(attribs) {
      if (attribs == null) {
        attribs = {};
      }
      if (attribs.calEvents != null) {
        util.assertion(attribs.uid != null, 'Cannot define calEvents without UID.');
        this.uid = attribs.uid;
      } else {
        util.assertion(!(attribs.uid != null), 'Cannot define UID without calEvents');
        this.uid = attribs.uid = Calendar.EMPTY_UID;
      }
      Calendar.__super__.constructor.call(this, attribs);
      console.log("new calendar: " + (this.get('uid')));
    }

    Calendar.prototype.initialize = function(attribs) {
      var _ref,
        _this = this;
      console.log("Calendar initialize " + (this.get('uid')) + ", attributes...");
      console.log(attribs);
      util.setCollectionAsAttribute(this, 'calEvents', (_ref = attribs.calEvents) != null ? _ref : []);
      this.calEvents.comparator = function(event) {
        return event.get('name');
      };
      this.view = new CalendarView({
        model: this
      });
      this.on('change:calEvents', function() {
        return _this.onReplaceCalEvents();
      });
      this.calEvents.on('add remove change', function() {
        return _this.onEditCalendar();
      });
      return this.on('error', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.onError.apply(_this, args);
      });
    };

    Calendar.prototype.validate = function(attribs) {
      if (attribs.calEvents == null) {
        if ((attribs.uid != null) && attribs.uid !== this.uid) {
          return "Incorrect UID: " + attribs.uid;
        }
      }
    };

    Calendar.prototype.add = function(event) {
      var ii, _ref;
      event.parent = this;
      this.calEvents.add(event);
      console.log("ADDDING EVENT len:" + this.calEvents.models.length);
      console.log(event);
      _ref = this.calEvents.models;
      for (ii in _ref) {
        event = _ref[ii];
        console.log("-- " + ii);
        console.log(event);
      }
      return event;
    };

    /* 
    Adds a non-overlapping event.
    If no date is specified, then finds an available slot.
    Returns the event or undefined if event could not be added.
    */


    Calendar.prototype.addNewEvent = function(attribs) {
      var all_names, day, ev, hour, length, time, used_names, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      if (attribs == null) {
        attribs = {};
      }
      used_names = this.calEvents.pluck('name');
      if (attribs.name == null) {
        all_names = _.keys(SupplicantView.NAMES_AND_AVATARS);
        attribs.name = util.choose(all_names, used_names);
      }
      util.assertion((_ref = attribs.name, __indexOf.call(used_names, _ref) < 0), 'Cannot duplicate name.');
      if (attribs.day != null) {
        if (attribs.length != null) {
          if (this.overlaps(attribs)) {
            return void 0;
          }
          return this.add(new CalEvent(attribs));
        }
        _ref1 = [4];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          length = _ref1[_i];
          length = Math.min(length, 17 - attribs.time);
          if (length < 4) {
            continue;
          }
          ev = this.addNewEvent(_.extend({
            length: length
          }, attribs));
          if (ev != null) {
            return ev;
          }
        }
        return void 0;
      }
      for (day = _j = 0; _j < 7; day = ++_j) {
        _ref2 = [9, 13];
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          hour = _ref2[_k];
          _ref3 = [hour];
          for (_l = 0, _len2 = _ref3.length; _l < _len2; _l++) {
            time = _ref3[_l];
            ev = this.addNewEvent(_.extend({
              day: day,
              time: time
            }, attribs));
            if (ev != null) {
              return ev;
            }
          }
        }
      }
      return void 0;
    };

    Calendar.prototype.overlaps = function(ev1, exclude) {
      var ev2, _i, _len, _ref;
      exclude = exclude != null ? exclude : ev1;
      _ref = this.calEvents.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ev2 = _ref[_i];
        if (ev2 !== exclude) {
          if (ev2.overlaps(ev1)) {
            return true;
          }
        }
      }
      return false;
    };

    Calendar.prototype.hasOverlaps = function() {
      var event, _i, _len, _ref;
      _ref = this.calEvents.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (this.overlaps(event)) {
          return true;
        }
      }
      return false;
    };

    Calendar.prototype.saveNew = function() {
      var _this = this;
      console.log(" _!_!_ SAVING CALENDAR WITH WITH _!_!_ " + this.id);
      util.assertion(this.isNew(), 'Cannot save a calendar twice.');
      return Calendar.saveNewCalendar({
        calendar: this
      }, function(new_cal) {
        console.log('finished saving');
        console.log(new_cal);
        _this.set(new_cal.attributes);
        console.log('set myself');
        return console.log(_this);
      });
    };

    Calendar.prototype.onReplaceCalEvents = function() {
      var calEvent, _i, _len, _ref;
      util.assertion(!this.hasOverlaps(), 'Events cannot overlap.');
      _ref = this.calEvents.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        calEvent = _ref[_i];
        calEvent.parent = this;
      }
      return console.log("calendar rest calevents uid:" + this.uid + " id:" + this.id + " getid:" + (this.get('id')));
    };

    Calendar.prototype.onEditCalendar = function() {
      util.assertion(!this.hasOverlaps(), 'Events cannot overlap.');
      console.log("calendar old uid:" + this.uid + " id:" + this.id + " getid:" + (this.get('id')));
      this.uid = util.uid();
      this.set('uid', this.uid);
      this.unset('id');
      return console.log("calendar reset uid:" + this.uid + " id:" + this.id + " getid:" + (this.get('id')));
    };

    Calendar.prototype.onError = function(instruction, error_str) {
      throw new Error(error_str);
    };

    return Calendar;

  })(RemoteModel);

  CalendarView = (function(_super) {

    __extends(CalendarView, _super);

    function CalendarView(args) {
      args.el = $('#prototypes .calendarView').clone()[0];
      CalendarView.__super__.constructor.call(this, args);
    }

    CalendarView.prototype.initialize = function() {
      var _this = this;
      this.model.on('calEvents:add', function(calEvent) {
        return _this.addEvent(calEvent);
      });
      this.model.on('calEvents:remove', function(calEvent) {
        return _this.removeEvent(calEvent);
      });
      this.model.on('change:calEvents', CalendarView.prototype.onReplaceCalEvents, this);
      return this.$el.on('click', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.onClick.apply(_this, args);
      });
    };

    CalendarView.prototype.addEvent = function(calEvent) {
      var _this = this;
      this.$el.append(calEvent.view.el);
      calEvent.view.onModelChange(calEvent.attributes);
      return util.later(500, function() {
        return calEvent.edit_view.show();
      });
    };

    CalendarView.prototype.removeEvent = function(calEvent) {
      return calEvent.view.$el.remove();
    };

    CalendarView.prototype.onClick = function(event) {
      var cal_x, cal_y, click_x, click_y, new_event, _ref;
      _ref = this.$el.offset(), cal_x = _ref.left, cal_y = _ref.top;
      click_x = event.pageX - cal_x;
      click_y = event.pageY - cal_y;
      new_event = this.model.addNewEvent({
        day: Math.floor(click_x / CalEventView.DAY_WIDTH_PIXELS),
        time: Math.floor(click_y / (CalEventView.HOUR_HEIGHT_PIXELS * 4)) * 4 + 9
      });
      if (new_event == null) {
        alert('Insufficient space to add event.');
      }
      return false;
    };

    CalendarView.prototype.onReplaceCalEvents = function() {
      var args, index_by_name, name, new_event, new_events, old_event, old_events, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      index_by_name = function(models) {
        var model;
        return util.mash((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            _results.push([model.get('name'), model]);
          }
          return _results;
        })());
      };
      old_events = index_by_name(this.model.previous('calEvents'));
      new_events = index_by_name(this.model.get('calEvents'));
      for (name in new_events) {
        new_event = new_events[name];
        console.log("" + (new_event.get('name')) + " -> " + old_event);
        old_event = old_events[name];
        if (old_event != null) {
          new_event.view.$el.css({
            width: old_event.view.$el.css('width'),
            height: old_event.view.$el.css('height'),
            left: old_event.view.$el.css('left'),
            top: old_event.view.$el.css('top')
          });
        }
        this.$el.append(new_event.view.$el);
        new_event.view.onModelChange(new_event.attributes);
      }
      _results = [];
      for (name in old_events) {
        old_event = old_events[name];
        _results.push(old_event.view.$el.detach());
      }
      return _results;
    };

    return CalendarView;

  })(Backbone.View);

  $(function() {
    var create_game, game_type, name, routes,
      _this = this;
    routes = {
      'do': DoGame,
      'type': TypeGame,
      'type/:game_length': TypeGame,
      'test': TestGame,
      'admin': AdminGame,
      'admin/:func': AdminGame,
      'admin/:func/:arg0': AdminGame,
      'admin/:func/:arg0/:arg1': AdminGame
    };
    Game.router = new Backbone.Router;
    create_game = function(game_type) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Game.instantiate.apply(Game, [game_type].concat(__slice.call(args)));
      };
    };
    for (name in routes) {
      game_type = routes[name];
      Game.router.route(name, '', create_game(game_type));
    }
    Game.router.route('', '', function() {
      return Game.router.navigate('test', {
        trigger: true
      });
    });
    return Backbone.history.start();
  });

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.game = void 0;

    Game.instantiate = function() {
      var args, game_type;
      game_type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.game != null) {
        console.log("_!_!_!_ DELETING PREVIOUS GAME _!_!_!_");
        this.game.view.$el.remove();
      }
      console.log("_!_!_!_ CREATING NEW GAME _!_!_!_ : " + game_type.name);
      this.game = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(game_type, args, function(){});
      console.log("appending");
      console.log(this.game.view.$el);
      return $('#gameArea').prepend(this.game.view.$el);
    };

    return Game;

  })(Backbone.Model);

  GameView = (function(_super) {

    __extends(GameView, _super);

    function GameView() {
      return GameView.__super__.constructor.apply(this, arguments);
    }

    GameView.prototype.initialize = function(options) {
      GameView.__super__.initialize.call(this, options);
      return this.model.on('change', GameView.prototype.onChange, this);
    };

    GameView.prototype.onChange = function(model, options) {
      var attrib, new_view, _i, _len, _ref, _ref1, _results;
      console.log('TODO: remove the previous version of whatever it was');
      _ref = _.keys(options.changes);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attrib = _ref[_i];
        new_view = (_ref1 = this.model.get(attrib)) != null ? _ref1.view : void 0;
        if (new_view == null) {
          continue;
        }
        console.log("ADDING VIEW: " + (util.typeName(new_view)));
        _results.push(this.$el.append(new_view.$el));
      }
      return _results;
    };

    GameView.showDebugColors = function() {
      var color, colors, _i, _len, _results;
      colors = ['blue', 'green', 'red', 'yellow', 'purple', 'orange'];
      _results = [];
      for (_i = 0, _len = colors.length; _i < _len; _i++) {
        color = colors[_i];
        _results.push($(".test-" + color).css({
          backgroundColor: color
        }));
      }
      return _results;
    };

    return GameView;

  })(Backbone.View);

  Guide = (function(_super) {

    __extends(Guide, _super);

    function Guide() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Guide.__super__.constructor.apply(this, args);
    }

    Guide.prototype.initialize = function() {
      util.setCollectionAsAttribute(this, 'instructions');
      this.instructions.comparator = function(instruction) {
        return instruction.get('uid');
      };
      this.view = new GuideView({
        model: this
      });
      return console.log(this.view);
    };

    Guide.prototype.updateInstruction = function(new_instruction) {
      var results, uid;
      if (new_instruction == null) {
        return;
      }
      uid = new_instruction.get('uid');
      results = this.instructions.where({
        uid: uid
      });
      util.assertion(results.length === 1, "UID " + uid + " not unique.");
      return results[0].set(new_instruction.attributes);
    };

    return Guide;

  })(Backbone.Model);

  GuideView = (function(_super) {

    __extends(GuideView, _super);

    GuideView.prototype.events = {
      'change #instructionInput': 'onNewInput'
    };

    function GuideView(args) {
      args.el = $('#prototypes .guideView').clone()[0];
      GuideView.__super__.constructor.call(this, args);
    }

    GuideView.prototype.initialize = function() {
      var _this = this;
      this.input = $(this.$el.find('#instructionInput'));
      this.list = $(this.$el.find('#instructionList'));
      return this.model.on('instructions:add', function(instruction) {
        return _this.onAdd(instruction);
      });
    };

    GuideView.prototype.onNewInput = function() {
      var text;
      console.log("ON NEW INPUT");
      text = $.trim(this.input.val());
      if (text.length > 0) {
        this.input.val('');
        return this.model.instructions.add(new Instruction({
          text: text
        }));
      }
    };

    GuideView.prototype.onAdd = function(instruction) {
      var bottom, container_height, el, inner_height, top, _i, _len, _ref, _ref1;
      instruction.view.render();
      this.list.append(instruction.view.$el);
      _ref = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY], bottom = _ref[0], top = _ref[1];
      _ref1 = this.list.children();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        bottom = Math.min(bottom, $(el).position().top);
        top = Math.max(top, $(el).position().top + $(el).height());
      }
      inner_height = top - bottom;
      container_height = this.list.height();
      this.list.stop(true);
      return this.list.animate({
        scrollTop: inner_height - container_height
      }, 1400, 'easeOutQuint');
    };

    return GuideView;

  })(Backbone.View);

  Instruction = (function(_super) {

    __extends(Instruction, _super);

    chatter.register(Instruction);

    Instruction.prototype.defaults = {
      state: 'sending'
    };

    Instruction.getAll = RemoteModel.remoteStaticMethod('getAll');

    Instruction.enqueueInstruction = RemoteModel.remoteStaticMethod('enqueueInstruction');

    Instruction.dequeueInstruction = RemoteModel.remoteStaticMethod('dequeueInstruction');

    Instruction.submitSolution = RemoteModel.remoteStaticMethod('submitSolution');

    function Instruction(attribs, view_type) {
      var _ref;
      if (attribs == null) {
        attribs = {};
      }
      this.view_type = view_type != null ? view_type : InstructionView;
      if ((_ref = attribs.uid) == null) {
        attribs.uid = "" + ((new Date).getTime()) + "-" + (util.uid());
      }
      this.original_uid = attribs.uid;
      Instruction.__super__.constructor.call(this, attribs);
      console.log("new instruction: " + (this.get('uid')));
    }

    Instruction.prototype.initialize = function() {
      var _this = this;
      this.view = new this.view_type({
        model: this
      });
      return this.on('error', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.onError.apply(_this, args);
      });
    };

    Instruction.prototype.onError = function(instruction, error_str) {
      return this.set('state', "Error: " + error_str);
    };

    return Instruction;

  })(RemoteModel);

  InstructionView = (function(_super) {

    __extends(InstructionView, _super);

    InstructionView.COLORS = {
      error_string: 'rgb(226, 1, 61)'
    };

    function InstructionView(args) {
      args.el = $('#prototypes .instructionView').clone()[0];
      InstructionView.__super__.constructor.call(this, args);
    }

    InstructionView.prototype.initialize = function(model) {
      this.text = this.$el.find('#text');
      this.state = this.$el.find('#state');
      this.actions = this.$el.find('#actions');
      return this.model.on('change:state', InstructionView.prototype.onChangeStatus, this);
    };

    InstructionView.prototype.render = function() {
      this.text.text(this.model.get('text'));
      this.state.text(this.model.get('state'));
      return this.actions.text("");
    };

    InstructionView.prototype.onChangeStatus = function(model, new_state) {
      if (new_state.slice(0, 5) === 'Error') {
        this.state.css({
          color: InstructionView.COLORS.error_string
        });
      }
      return this.render();
    };

    return InstructionView;

  })(Backbone.View);

  DoInstructionView = (function(_super) {

    __extends(DoInstructionView, _super);

    DoInstructionView.COLORS = {
      error_string: 'rgb(226, 1, 61)'
    };

    function DoInstructionView(args) {
      args.el = $('#prototypes .doInstructionView').clone()[0];
      DoInstructionView.__super__.constructor.call(this, args);
    }

    DoInstructionView.prototype.initialize = function(model) {
      this.player = this.$el.find('#player');
      this.text = this.$el.find('#text');
      return this.model.on('change', DoInstructionView.prototype.render, this);
    };

    DoInstructionView.prototype.render = function() {
      this.player.text(util.prettyUsername(this.model.get('created_by')));
      return this.text.text(this.model.get('text'));
    };

    return DoInstructionView;

  })(Backbone.View);

  Player = (function(_super) {

    __extends(Player, _super);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    chatter.register(Player);

    Player.getMyChannelToken = RemoteModel.remoteStaticMethod('getMyChannelToken');

    return Player;

  })(RemoteModel);

  Rabble = (function(_super) {

    __extends(Rabble, _super);

    function Rabble(calendar) {
      this.calendar = calendar;
      Rabble.__super__.constructor.apply(this, arguments);
    }

    Rabble.prototype.initialize = function() {
      var _this = this;
      util.setCollectionAsAttribute(this, 'supplicants');
      this.supplicants.comparator = function(sup) {
        return sup.get('name');
      };
      this.view = new RabbleView({
        model: this
      });
      this.calendar.on('change:calEvents', function() {
        return _this.resetMapping();
      });
      return this.calendar.calEvents.on('add remove change:name', function() {
        return _this.resetMapping();
      });
    };

    Rabble.prototype.add = function(sup) {
      sup.parent = this;
      return this.supplicants.add(sup);
    };

    Rabble.prototype.addRandomSupplicant = function() {
      var all_names, attribs, used_names, _ref, _ref1, _ref2;
      attribs = {};
      all_names = _.keys(SupplicantView.NAMES_AND_AVATARS);
      used_names = this.supplicants.pluck('name');
      attribs.name = util.choose(all_names, used_names);
      attribs.title = CalEvent.TITLES[0];
      _ref = util.withProbability([
        0.11, function() {
          return ['1', '--'];
        }, 0.11, function() {
          return ['2', '--'];
        }, 0.11, function() {
          return ['3', '--'];
        }, 0.11, function() {
          return ['4', '--'];
        }, 0.11, function() {
          return ['5', '--'];
        }, 0.11, function() {
          return ['12', '--'];
        }, 0.11, function() {
          return ['23', '--'];
        }, 0.11, function() {
          return ['34', '--'];
        }, 0.11, function() {
          return ['45', '--'];
        }, null, function() {
          return ['1', '--'];
        }
      ]), attribs.days = _ref[0], attribs.day_str = _ref[1];
      _ref1 = util.withProbability([
        0.33, function() {
          return [9, 13, 'Morning'];
        }, 0.33, function() {
          return [13, 17, 'Afternoon'];
        }, null, function() {
          return [9, 17, 'Any Time'];
        }
      ]), attribs.start = _ref1[0], attribs.end = _ref1[1], attribs.time_str = _ref1[2];
      attribs.length = 4;
      util.assertion((1 <= (_ref2 = attribs.length) && _ref2 <= attribs.end - attribs.start), "Invalid length: " + attribs.length + " (start:" + attribs.start + " end:" + attribs.end + ")");
      attribs.length_str = attribs.length === 1 ? "1 hr" : "" + attribs.length + " hrs";
      return this.add(new Supplicant(attribs));
    };

    Rabble.prototype.resetMapping = function() {
      var calEvent, link, sup, _i, _j, _len, _len1, _ref, _ref1, _results;
      console.log("  _!_!_ RESET MAPPING _!_!_");
      link = function(sup, calEvent) {
        var _this = this;
        if (!(calEvent != null)) {
          sup.unset('calEvent');
          return sup.constraint_view.fadeOut();
        } else if (!(sup != null)) {
          calEvent.view.setStatus('unmatched');
          calEvent.off('change', Supplicant.prototype.onCalEventChange);
          calEvent.view.$el.off('mouseenter');
          return calEvent.view.$el.off('mouseleave');
        } else {
          console.log("linking " + (sup.get('name')) + " <-> " + (calEvent.get('name')));
          sup.set('calEvent', calEvent);
          calEvent.on('change', Supplicant.prototype.onCalEventChange, sup);
          calEvent.view.$el.on('mouseenter', function() {
            return sup.constraint_view.fadeIn();
          });
          return calEvent.view.$el.on('mouseleave', function() {
            return sup.constraint_view.fadeOut();
          });
        }
      };
      _ref = this.supplicants.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sup = _ref[_i];
        link(sup, void 0);
      }
      _ref1 = this.calendar.calEvents.models;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        calEvent = _ref1[_j];
        sup = this.supplicants.getByCid(calEvent.get('name'));
        _results.push(link(sup, calEvent));
      }
      return _results;
    };

    return Rabble;

  })(Backbone.Model);

  RabbleView = (function(_super) {

    __extends(RabbleView, _super);

    function RabbleView(options) {
      options.el = $('#prototypes .rabbleView').clone()[0];
      RabbleView.__super__.constructor.call(this, options);
    }

    RabbleView.prototype.initialize = function() {
      var _this = this;
      this.container = this.$el.find('#container');
      return this.model.on('supplicants:add', function(sup) {
        return _this.onAddSupplicant(sup);
      });
    };

    RabbleView.prototype.onAddSupplicant = function(sup) {
      util.verticalAppend(sup.view.$el, this.container, SupplicantView.HEIGHT, SupplicantView.VERTICAL_MARGIN);
      return this.model.calendar.view.$el.prepend(sup.constraint_view.el);
    };

    return RabbleView;

  })(Backbone.View);

  Supplicant = (function(_super) {

    __extends(Supplicant, _super);

    Supplicant.prototype.defaults = {
      status: 'unmatched',
      points: 100
    };

    function Supplicant() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Supplicant.__super__.constructor.apply(this, args);
    }

    Supplicant.prototype.initialize = function(args) {
      var _this = this;
      this.cid = args.name;
      util.assertion(this.cid in SupplicantView.NAMES_AND_AVATARS, "Unknown name: " + this.cid + ".");
      this.view = new SupplicantView({
        model: this
      });
      this.constraint_view = new SupplicantConstraintView({
        model: this
      });
      return this.on('change:calEvent', function(sup, calEvent) {
        return _this.onCalEventChange(calEvent);
      });
    };

    Supplicant.prototype.getAllSatisfyingDates = function() {
      var date, day, satisfying_dates, this_time_works, time;
      satisfying_dates = (function() {
        var _i, _results;
        _results = [];
        for (day = _i = 0; _i < 7; day = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (time = _j = 9; _j < 17; time = ++_j) {
              date = {
                day: day,
                time: time
              };
              this_time_works = this.checkStatus(date) === 'satisfies';
              if (!this_time_works) {
                continue;
              }
              _results1.push(date);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      return _.flatten(satisfying_dates);
    };

    Supplicant.prototype.checkStatus = function(x) {
      var date, days, end, errors, length, name, start, title, val, _ref, _ref1;
      _ref = (function() {
        var _i, _len, _ref, _results;
        _ref = ['name', 'title', 'days', 'start', 'end', 'length'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _results.push(this.get(val));
        }
        return _results;
      }).call(this), name = _ref[0], title = _ref[1], days = _ref[2], start = _ref[3], end = _ref[4], length = _ref[5];
      errors = [];
      if (util.typeName(x) === 'CalEvent') {
        console.log("MATCHING: " + (x.get('name')) + " AND " + name);
        if (name !== x.get('name')) {
          return 'unmatched';
        }
        if (title !== x.get('title')) {
          errors.push('title');
        }
        if (length !== x.get('length')) {
          errors.push('length');
        }
        date = x.attributes;
      } else {
        date = _.extend({
          length: 1
        }, x);
      }
      if (!((_ref1 = "" + date.day, __indexOf.call(days.split(''), _ref1) >= 0) && date.time >= start && date.time + date.length <= end)) {
        errors.push('date');
      }
      if (_.isEmpty(errors)) {
        return 'satisfies';
      } else {
        return "error:" + (errors.join());
      }
    };

    Supplicant.prototype.onCalEventChange = function(calEvent) {
      var old_status, status;
      console.log("onCalEventChange (" + (this.get('name')) + "): " + (calEvent != null ? calEvent.get('name') : void 0));
      old_status = this.get('status');
      console.log("old_status: " + old_status);
      if (!(calEvent != null)) {
        this.set('status', 'unmatched');
      } else {
        status = this.checkStatus(calEvent);
        calEvent.view.setStatus(status);
        this.set('status', status);
        console.log("CHECKING STATUS");
        console.log(this);
        console.log(calEvent);
        console.log(this.get('status'));
      }
      return console.log("new_status: " + (this.get('status')));
    };

    return Supplicant;

  })(Backbone.Model);

  SupplicantView = (function(_super) {

    __extends(SupplicantView, _super);

    SupplicantView.HEIGHT = 46;

    SupplicantView.VERTICAL_MARGIN = 14;

    SupplicantView.avatarImage = function(name) {
      var img_file;
      img_file = SupplicantView.NAMES_AND_AVATARS[name];
      return "/imgs/Face-Avatars-by-deleket/" + img_file;
    };

    function SupplicantView(args) {
      args.el = $('#prototypes .supplicantView').clone()[0];
      SupplicantView.__super__.constructor.call(this, args);
    }

    SupplicantView.prototype.initialize = function(args) {
      var _this = this;
      this.$el.find('#name').text(this.model.get('name'));
      this.$el.find('#points').text("" + (this.model.get('points')) + " pts");
      this.$el.find('#avatar').attr({
        src: SupplicantView.avatarImage(this.model.get('name'))
      });
      this.$el.find('#title').text(this.model.get('title'));
      this.$el.find('#constraint1').text("Duration: " + (this.model.get('length_str')));
      this.$el.find('#constraint2').text("" + (this.model.get('day_str')) + " " + (this.model.get('time_str')));
      this.onChangeStatus(this.model.get('status'));
      this.$el.on('mouseenter', function(event) {
        return _this.onMouseEnter(event);
      });
      this.$el.on('mouseleave', function(event) {
        return _this.onMouseLeave(event);
      });
      return this.model.on('change:status', function(sup, status) {
        return _this.onChangeStatus(status);
      });
    };

    SupplicantView.prototype.onMouseEnter = function(event) {
      return this.model.constraint_view.fadeIn();
    };

    SupplicantView.prototype.onMouseLeave = function(event) {
      return this.model.constraint_view.fadeOut();
    };

    SupplicantView.prototype.onChangeStatus = function(status) {
      console.log("onChangeStatus (" + (this.model.get('name')) + ") " + status);
      return this.$el.css({
        backgroundColor: (function() {
          switch (status) {
            case 'satisfies':
              return 'rgb(132, 186, 101)';
            case 'unmatched':
              return 'rgb(223, 90, 54)';
            default:
              return 'rgb(240, 144, 0)';
          }
        })()
      });
    };

    return SupplicantView;

  })(Backbone.View);

  SupplicantConstraintView = (function(_super) {

    __extends(SupplicantConstraintView, _super);

    function SupplicantConstraintView(args) {
      args.el = $('<div class="supplicantConstraintView">');
      SupplicantConstraintView.__super__.constructor.call(this, args);
    }

    SupplicantConstraintView.prototype.initialize = function(args) {
      var date, _i, _len, _ref;
      this.$el.attr({
        id: this.model.get('name')
      });
      _ref = this.model.getAllSatisfyingDates();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        date = _ref[_i];
        this.$el.append($('<div class="satisfyingDate">').css({
          left: date.day * CalEventView.DAY_WIDTH_PIXELS,
          top: (date.time - 9) * CalEventView.HOUR_HEIGHT_PIXELS
        }));
      }
      return this.$el.css({
        opacity: 0
      });
    };

    SupplicantConstraintView.prototype.fadeIn = function() {
      var constraint_views, view, _i, _len, _results;
      constraint_views = $('.supplicantConstraintView');
      _results = [];
      for (_i = 0, _len = constraint_views.length; _i < _len; _i++) {
        view = constraint_views[_i];
        view = $(view);
        view.stop(true);
        if (view.attr('id') === this.model.get('name')) {
          _results.push(view.animate({
            opacity: 0.5
          }, 200));
        } else {
          _results.push(view.css({
            opacity: 0
          }));
        }
      }
      return _results;
    };

    SupplicantConstraintView.prototype.fadeOut = function() {
      this.$el.stop(true);
      return this.$el.animate({
        opacity: 0
      }, 200);
    };

    return SupplicantConstraintView;

  })(Backbone.View);

  SupplicantView.NAMES_AND_AVATARS = {
    Joel: 'Males/A01.png',
    Seth: 'Males/A02.png',
    James: 'Males/A03.png',
    Ted: 'Males/A04.png',
    Alan: 'Males/A05.png',
    Karl: 'Males/B01.png',
    Ian: 'Males/B02.png',
    Dale: 'Males/B03.png',
    Ivan: 'Males/B04.png',
    Sean: 'Males/B05.png',
    Eric: 'Males/C01.png',
    Todd: 'Males/C02.png',
    Kurt: 'Males/C03.png',
    Jose: 'Males/C04.png',
    Joe: 'Males/C05.png',
    Kirk: 'Males/D01.png',
    Jack: 'Males/D02.png',
    Kevin: 'Males/D03.png',
    Jason: 'Males/D04.png',
    Marc: 'Males/D05.png',
    Ryan: 'Males/E01.png',
    Tony: 'Males/E02.png',
    Lee: 'Males/E03.png',
    Andy: 'Males/E04.png',
    Mike: 'Males/E05.png',
    Don: 'Males/F01.png',
    Leon: 'Males/F02.png',
    Bill: 'Males/F03.png',
    Roy: 'Males/F04.png',
    Erik: 'Males/F05.png',
    Jeff: 'Males/G01.png',
    Wade: 'Males/G02.png',
    Fred: 'Males/G03.png',
    Juan: 'Males/G04.png',
    Brian: 'Males/G05.png',
    Max: 'Males/H01.png',
    Luis: 'Males/H02.png',
    Hugh: 'Males/H03.png',
    Kent: 'Males/H04.png',
    Chad: 'Males/H05.png',
    Allen: 'Males/I01.png',
    Jesse: 'Males/I02.png',
    Randy: 'Males/I03.png',
    Billy: 'Males/I04.png',
    Danny: 'Males/I05.png',
    Larry: 'Males/J01.png',
    Bryan: 'Males/J02.png',
    Jerry: 'Males/J03.png',
    Shawn: 'Males/J04.png',
    Aaron: 'Males/J05.png',
    Jacob: 'Males/K01.png',
    Glenn: 'Males/K02.png',
    Roger: 'Males/K03.png',
    Ricky: 'Males/K04.png',
    Harry: 'Males/K05.png',
    Eddie: 'Males/L01.png',
    Peter: 'Males/L02.png',
    Jimmy: 'Males/L03.png',
    Scott: 'Males/L04.png',
    Mario: 'Males/L05.png',
    Chris: 'Males/M01.png',
    Keith: 'Males/M02.png',
    Jalen: 'Males/M03.png',
    Craig: 'Males/M04.png',
    Edwin: 'Males/M05.png',
    Terry: 'Males/N01.png',
    Frank: 'Males/N02.png',
    Barry: 'Males/N03.png',
    Bruce: 'Males/N04.png',
    Steve: 'Males/N05.png',
    Wayne: 'Males/O01.png',
    Henry: 'Males/O02.png',
    Ralph: 'Males/O03.png',
    Louis: 'Males/O04.png',
    Bobby: 'Males/O05.png',
    Lena: 'Females/FA01.png',
    Lynn: 'Females/FA02.png',
    Lois: 'Females/FA03.png',
    May: 'Females/FA04.png',
    Emma: 'Females/FA05.png',
    Lisa: 'Females/FB01.png',
    Eve: 'Females/FB02.png',
    Jane: 'Females/FB03.png',
    Ruby: 'Females/FB04.png',
    Anne: 'Females/FB05.png',
    Dora: 'Females/FC01.png',
    Jean: 'Females/FC02.png',
    Judy: 'Females/FC03.png',
    Olga: 'Females/FC04.png',
    Vera: 'Females/FC05.png',
    Jill: 'Females/FD01.png',
    Mary: 'Females/FD02.png',
    Rae: 'Females/FD03.png',
    June: 'Females/FD04.png',
    Lucy: 'Females/FD05.png',
    Cora: 'Females/FE01.png',
    Sara: 'Females/FE02.png',
    Leah: 'Females/FE03.png',
    Nora: 'Females/FE04.png',
    Rosa: 'Females/FE05.png',
    Joan: 'Females/FG01.png',
    Liz: 'Females/FG02.png',
    Tia: 'Females/FG03.png',
    Eva: 'Females/FG04.png',
    Kim: 'Females/FG05.png',
    Rose: 'Females/FH01.png',
    Tara: 'Females/FH02.png',
    Luz: 'Females/FH03.png',
    Edna: 'Females/FH04.png',
    Ella: 'Females/FH05.png',
    Ada: 'Females/FI01.png',
    Ana: 'Females/FI02.png',
    Toni: 'Females/FI03.png',
    Erin: 'Females/FI04.png',
    Mia: 'Females/FI05.png'
  };

  AdminGame = (function(_super) {

    __extends(AdminGame, _super);

    function AdminGame() {
      return AdminGame.__super__.constructor.apply(this, arguments);
    }

    AdminGame.prototype.initialize = function() {
      var args, func;
      func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.view = new AdminGameView({
        model: this
      });
      AdminGame.__super__.initialize.call(this);
      this.set({
        calendar: new Calendar
      });
      if (func == null) {
        func = 'displayStatus';
      }
      return this[func].apply(this, args);
    };

    AdminGame.prototype.displayStatus = function() {
      var _this = this;
      this.view.log('Displaying status...');
      return Calendar.getEmptyCalendar(function(empty) {
        console.log("got empty calendar");
        console.log(empty);
        return _this.view.log("got empty calendar id:" + empty.id + " uid:" + empty.uid);
      });
    };

    AdminGame.prototype.getCalendar = function(field, id) {
      var _this = this;
      return Calendar.getCalendar({
        field: field,
        value: id
      }, function(cal) {
        if (cal != null) {
          _this.get('calendar').set(cal.attributes);
          return _this.view.log("uid: " + cal.uid);
        } else {
          return alert("No calendar with " + field + "=" + id + ".");
        }
      });
    };

    return AdminGame;

  })(Game);

  AdminGameView = (function(_super) {

    __extends(AdminGameView, _super);

    function AdminGameView(options) {
      options.el = $('#prototypes .adminGameView').clone()[0];
      AdminGameView.__super__.constructor.call(this, options);
    }

    AdminGameView.prototype.initialize = function(options) {
      AdminGameView.__super__.initialize.call(this, options);
      return this.console = this.$el.find('#console');
    };

    AdminGameView.prototype.log = function(str) {
      return this.console.append($('<div>').text(str));
    };

    return AdminGameView;

  })(GameView);

  DoGame = (function(_super) {

    __extends(DoGame, _super);

    function DoGame() {
      return DoGame.__super__.constructor.apply(this, arguments);
    }

    DoGame.prototype.initialize = function() {
      var cal, inst;
      this.view = new DoGameView({
        model: this
      });
      DoGame.__super__.initialize.call(this);
      inst = new Instruction({}, DoInstructionView);
      cal = new Calendar;
      this.set({
        instruction: inst,
        calendar: cal
      });
      return this.dequeueInstruction();
    };

    DoGame.prototype.dequeueInstruction = function() {
      var _this = this;
      console.log("ABOUT TO DEQUEUE INSTRUCTION");
      return Instruction.dequeueInstruction(function(args) {
        return _this.setPuzzle.apply(_this, args);
      });
    };

    DoGame.prototype.setPuzzle = function(instruction, calendar) {
      var _ref;
      util.assertion((_ref = instruction.get('state')) === 'processing' || _ref === 'done', "Dequeued instruction with incorrect state " + ("'" + (instruction.get('state')) + "' (uid:" + (instruction.get('uid')) + ")"));
      if (instruction.get('state') === 'done') {
        instruction.attributes.text = "" + instruction.attributes.text + "...";
      }
      this.get('instruction').set(instruction.attributes);
      return this.get('calendar').set(calendar.attributes);
    };

    DoGame.prototype.submitSolution = function() {
      var _this = this;
      console.log('submit solution');
      return Instruction.submitSolution({
        instruction_uid: this.get('instruction').get('uid'),
        calendar: this.get('calendar')
      }, function(rv) {
        util.assertion(rv.submission === 'success', 'Unsuccessful submission.');
        alert('Great job!');
        return _this.setPuzzle.apply(_this, rv.next_puzzle);
      });
    };

    return DoGame;

  })(Game);

  DoGameView = (function(_super) {

    __extends(DoGameView, _super);

    function DoGameView(options) {
      options.el = $('#prototypes .doGameView').clone()[0];
      DoGameView.__super__.constructor.call(this, options);
    }

    DoGameView.prototype.initialize = function() {
      var add_event, skip, submit, undo,
        _this = this;
      DoGameView.__super__.initialize.call(this);
      add_event = this.$el.find('button#addEvent');
      undo = this.$el.find('button#undo');
      skip = this.$el.find('button#skip');
      submit = this.$el.find('button#submit');
      undo.attr({
        disabled: 'disabled'
      });
      skip.attr({
        disabled: 'disabled'
      });
      add_event.on('click', function() {
        return _this.model.get('calendar').addNewEvent();
      });
      skip.on('click', function() {
        return _this.model.dequeueInstruction();
      });
      submit.on('click', function() {
        return _this.model.submitSolution();
      });
      return util.later(function() {
        var cal;
        cal = _this.model.get('calendar');
        return cal.on('change calEvents:change calEvents:add calEvents:remove', function() {
          return util.later(function() {
            return submit.focus();
          });
        });
      });
    };

    return DoGameView;

  })(GameView);

  TestGame = (function(_super) {

    __extends(TestGame, _super);

    function TestGame() {
      return TestGame.__super__.constructor.apply(this, arguments);
    }

    TestGame.prototype.initialize = function(options) {
      var cal, ii, rabble, _i, _results;
      TestGame.__super__.initialize.call(this, options);
      this.view = new TestGameView({
        model: this
      });
      cal = new Calendar;
      rabble = new Rabble(cal);
      this.set({
        calendar: cal,
        rabble: rabble
      });
      _results = [];
      for (ii = _i = 1; _i <= 5; ii = ++_i) {
        _results.push(this.get('rabble').addRandomSupplicant());
      }
      return _results;
    };

    return TestGame;

  })(Game);

  TestGameView = (function(_super) {

    __extends(TestGameView, _super);

    function TestGameView(options) {
      options.el = $('#prototypes .testGameView').clone()[0];
      TestGameView.__super__.constructor.call(this, options);
    }

    TestGameView.prototype.initialize = function(options) {
      return TestGameView.__super__.initialize.call(this, options);
    };

    return TestGameView;

  })(GameView);

  TypeGame = (function(_super) {

    __extends(TypeGame, _super);

    function TypeGame() {
      return TypeGame.__super__.constructor.apply(this, arguments);
    }

    TypeGame.prototype.initialize = function(game_length) {
      var cal, cover, guide, rabble,
        _this = this;
      TypeGame.__super__.initialize.call(this);
      if (game_length == null) {
        game_length = 180;
      }
      this.set('remaining', game_length);
      this.view = new TypeGameView({
        model: this
      });
      Player.getMyChannelToken(function(token) {
        console.log("Recieved channel token: " + token);
        return openChannel(token, _this);
      });
      cal = new Calendar;
      rabble = new Rabble(cal);
      guide = new Guide;
      this.set({
        calendar: cal,
        rabble: rabble,
        guide: guide
      });
      cover = $('<div id="calendarCover">');
      cover.css({
        backgroundColor: 'white',
        width: 630,
        height: 320,
        left: 82,
        top: 313,
        opacity: 0.25,
        zIndex: 10000
      });
      this.view.$el.append(cover);
      console.log('APPENDING CALENDAR COVER');
      console.log(cover);
      guide.on('instructions:add', TypeGame.prototype.onAddInstruction, this);
      return util.later(100, function() {
        var ii, _i;
        alert("You have " + (_this.get('remaining')) + " seconds to satisfy as many cosntraints as possible. Click to start.");
        for (ii = _i = 1; _i <= 30; ii = ++_i) {
          _this.get('rabble').addRandomSupplicant();
        }
        return _this.interval_func_id = setInterval((function() {
          return _this.tick();
        }), 1000);
      });
    };

    TypeGame.prototype.tick = function() {
      var remaining;
      console.log('tick');
      remaining = this.get('remaining') - 1;
      this.set('remaining', remaining);
      if (remaining <= 0) {
        alert('Game Over!');
        clearInterval(this.interval_func_id);
      }
      return console.log("remaining: " + remaining);
    };

    TypeGame.prototype.postSolution = function(args) {
      var cal, guide;
      console.log('TypeGame.updateInstructions');
      console.log(args);
      guide = this.get('guide');
      guide.updateInstruction(args.solved_instruction);
      guide.updateInstruction(args.next_instruction);
      cal = this.get('calendar');
      return cal.set(args.solved_calendar.attributes);
    };

    TypeGame.prototype.onAddInstruction = function(new_instruction) {
      var calendar, data_to_send, index, inst, instructions, n_instructions, prev_instruction,
        _this = this;
      calendar = this.get('calendar');
      instructions = this.get('guide').get('instructions');
      n_instructions = instructions.length;
      for (index in instructions) {
        inst = instructions[index];
        console.log("" + index + " : " + (inst.get('uid')) + " '" + (inst.get('text')) + "'");
      }
      util.assertion(n_instructions > 0, 'Added instruction but array still empty.');
      util.assertion(instructions[n_instructions - 1].get('uid') === new_instruction.get('uid'), 'New instruction is not the last.');
      if (n_instructions === 1) {
        new_instruction.set('calendar_uid', calendar.get('uid'));
        data_to_send = {
          instruction: new_instruction,
          calendar: calendar
        };
      } else {
        prev_instruction = instructions[n_instructions - 2];
        new_instruction.set('previous_uid', prev_instruction.get('uid'));
        data_to_send = {
          instruction: new_instruction
        };
      }
      return Instruction.enqueueInstruction(data_to_send, function(update) {
        var results, uid;
        console.log("got new update");
        console.log(update);
        uid = update.get('uid');
        results = _this.get('guide').instructions.where({
          uid: uid
        });
        util.assertion(results.length === 1, "UID " + uid + " not unique.");
        return results[0].set(update.attributes);
      });
    };

    return TypeGame;

  })(Game);

  TypeGameView = (function(_super) {

    __extends(TypeGameView, _super);

    function TypeGameView(options) {
      options.el = $('#prototypes .typeGameView').clone()[0];
      TypeGameView.__super__.constructor.call(this, options);
    }

    TypeGameView.prototype.initialize = function(options) {
      var _this = this;
      TypeGameView.__super__.initialize.call(this, options);
      return this.model.on('change:remaining', function() {
        return _this.$el.find('#remaining').text(_this.model.get('remaining'));
      });
    };

    return TypeGameView;

  })(GameView);

}).call(this);
